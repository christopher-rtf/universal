"use strict";
var fluid  = require("infusion");
var gpii   = fluid.registerNamespace("gpii");
var jqUnit = require("node-jqunit");

require("json5/lib/register");

var fs   = require("fs");
var path = require("path");

require("gpii-json-schema");

require("./lib/validation");
require("../src/js/lib/get-settings-schema");
require("../src/js/filter-schema-settings");

jqUnit.module("Sanity checks for test settings payloads (using generated schema).");

fluid.registerNamespace("gpii.tests.universal.solutionsRegistry.settingsPayloads");

gpii.tests.universal.solutionsRegistry.settingsPayloads.validateSettingsDir = function (that, globalValidator) {
    jqUnit.test("Validating preferences test data.", function () {
        var resolvedPath = fluid.module.resolvePath(that.options.settingsDataPath);
        var pathFiles = fs.readdirSync(resolvedPath);
        var jsonFiles = pathFiles.filter(function (singlePath) { return singlePath.match(/.json5?$/i); });
        var pathedJsonFiles = fluid.transform(jsonFiles, function (jsonFile) {
            return path.resolve(resolvedPath, jsonFile);
        });
        fluid.each(pathedJsonFiles, function (settingsFilePath) {
            gpii.tests.universal.solutionsRegistry.settingsPayloads.validateSettingsFile(that, settingsFilePath, globalValidator);
        });
<<<<<<< HEAD

        fluid.promise.sequence(promises).then(
            function () {
                jqUnit.start();
                jqUnit.assert("All test preference files are valid.");

                // console.log("Filename, Uncached, Cached");
                fluid.each(validationTimesByFile, function (validationTimes, filename) {
                    var uncachedTime = validationTimes.endUncached - validationTimes.startUncached;
                    jqUnit.assertTrue("The uncached validation time for file '" + filename + "' (" + uncachedTime + "ms) should be reasonable (< 2000ms).", uncachedTime < 2000);

                    var cachedTime = validationTimes.endCached - validationTimes.endUncached;
                    jqUnit.assertTrue("The cached validation time for file '" + filename + "' (" + cachedTime + "ms) should be reasonable (< 50ms).", cachedTime < 50);
                    // console.log([path.basename(filename, ".json5"), uncachedTime, cachedTime].join(", "));
                });
            },
            function () {
                jqUnit.start();
                jqUnit.fail("All test preference files could not be validated.");
            }
        );
=======
>>>>>>> 1c8111cf28b8933f180f72b64b2d8bdef0094432
    });
};

gpii.tests.universal.solutionsRegistry.settingsPayloads.validateSettingsFile = function (that, settingsFilePath, globalValidator) {
    var settingsSchema = gpii.universal.solutionsRegistry.getSettingsSchema("%gpii-universal/build/schemas/settings-schema.json");

<<<<<<< HEAD
        // Validate each file using the new "per solution" settings validation middleware.
        var requestData = { body: settingsData };
        var validationPromise = validationMiddleware.handle({ req: requestData});
        validationPromise.then(
            function () {
                jqUnit.assert("Settings file '" + settingsFilePath + "' is valid.");
            },
            function (validationError) {
                jqUnit.fail("Settings file '" + settingsFilePath + "' is invalid.");
                fluid.log("The error returned was: " + validationError.message);
                fluid.each(validationError.errors, function (singleError) {
                    fluid.log("Validation error in file '" + settingsFilePath + "':");
                    fluid.log("  - " + singleError.dataPath.join(".") + ": " + singleError.message);
=======
    var settingsData = {};
    try {
        settingsData = require(settingsFilePath);
    }
    catch (error) {
        jqUnit.fail("There should not be any invalid settings files (failed checking '" + settingsFilePath + "'.");
        fluid.log(error);
    }
>>>>>>> 1c8111cf28b8933f180f72b64b2d8bdef0094432

    // Validate each file using the new "generated settings payload" schema.
    var filteredSettingsSchema = gpii.universal.solutionsRegistry.filterSchemaToSettings(settingsData, settingsSchema);
    var settingsFileSchema = {
        "$schema": "gss-v7-full#",
        type: "object",
        properties: {
            flat: {
                type: "object",
                required: true,
                properties: {
                    contexts: {
                        type: "object",
                        required: true,
                        minProperties: 1,
                        additionalProperties: {
                            type: "object",
                            properties: {
                                settings: filteredSettingsSchema
                            }
                        }
                    }
                }
            }
        }
    };

    var settingsFileIsValid = gpii.tests.universal.solutionsRegistry.validateSinglePayload(
        globalValidator,
        settingsData,
        settingsFileSchema,
        "settings file '" + settingsFilePath + "'"
    );
    jqUnit.assertTrue("The settings file should be valid.", settingsFileIsValid);
};

fluid.defaults("gpii.tests.universal.solutionsRegistry.settingsPayloads", {
    gradeNames: ["fluid.component"],
    settingsDataPath: "%gpii-universal/testData/preferences",
    listeners: {
        "onCreate.validateSettingsDir": {
            funcName: "gpii.tests.universal.solutionsRegistry.settingsPayloads.validateSettingsDir",
            args: ["{that}", "{gpii.schema.validator}"]
        }
    }
});

gpii.tests.universal.solutionsRegistry.settingsPayloads();
